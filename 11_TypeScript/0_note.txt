1. 타입스크립트란? (made by 마소)
JS는 문법이 매우 유연한 동적 타입 언어(=변수 선언 시 자료형을 정의할 필요가 없음)

TS는 문법이 매우 엄격한 정적 타입 언어(=변수 선언 시 자료형을 미리 지정)
TypeScript = JavaScript + Type문법이 추가된 JS의 Superset(상위집합 => JS < TS 포함관계)

2. 타입스크립트 쓰는 이유?
1) JS는 매우 유연하고 다른 자료형의 값도 수용할 수 있기 때문에, 코드가 혼란스워지고 버그가 발생하기 쉬움
언뜻 편해보이지만 프로젝트의 규모가 복잡하고 커질수록 언어의 유연성은 점점 단점으로 작용
(안돼야 하는데 되어버려서 잠재적 오류 발생 가능성이 올라감)

예1)
JS는 아래 연산이 가능
10 - '5' // JS가 알아서 숫자로 바꾸고 연산

하지만 TS는 타입을 엄격하게 검사함
(정적 타입 언어에서는 숫자 - 숫자만 가능)
10 - '5' // TS Error 발생

예2)
function getUserById(userId) {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}
함수 선언만 봐서는 어떤 타입의 데이터를 넘겨야 할지 알 수 없음
함수를 호출하는 다른 코드의 일부를 봐야 명확해짐

하지만 TS를 사용한다면
function getUserById(userId: number) {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}
userId가 숫자 타입인 것을 알 수 있고, 문자열을 넘겨주면 에러가 발생
함수만 봐도 코드가 명확해짐

2) 엄격한 타입 체크로 인한 부가적인 효과
TS는 에러메세지가 디테일하고 자동완성 기능이 강력함

3. 타입스크립트 설치
npm install -g typescript
-g: 글로벌, 전역 설치

4. tsconfig.json 작성(타입스크립트 설정)
tsc --init